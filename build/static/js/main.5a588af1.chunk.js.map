{"version":3,"sources":["assets/images/noUserPhoto.webp","serviceWorker.js","FLUX/contactsList/selectors.js","FLUX/contactsList/types.js","FLUX/contactsList/actions.js","VIEW/Components/Header/Header.js","FLUX/contactsList/operations.js","VIEW/Components/ContactsList/ContactDetails.js","VIEW/Components/common/Preloader.js","VIEW/Components/common/Pagination/Paginator.js","VIEW/Components/ContactsList/ContactsList.js","VIEW/Components/ContactsList/AddUserContact.js","VIEW/Components/Main/Main.js","App.js","FLUX/contactsList/reducers.js","FLUX/storage.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","getContactsListLength","state","getFilteredContacts","length","getContactsPerPage","contactsList","contactsPerPage","getSearchFilter","searchFilter","getShowFrom","showFrom","getSortBy","sortBy","getSortForward","sortForward","createSelector","list","contacts","array","search","regExp","RegExp","filter","checkStringInObj","obj","key","hasOwnProperty","test","applySearchFilter","getSortedContacts","sortProperty","forward","s","a","b","sort","sortList","slice","getSlicedList","getContactsList","isFetching","fetchingSuccess","FETCHING_LIST","INSERT_BEGIN","REQUEST_LIST","SEARCH_FILTER","SHOW_FROM","SORT_BY","SORT_FORWARD","payload","type","types","mapDispatchToProps","setContactsPerPage","num","dispatch","requestList","rows","axios","headers","then","response","status","data","setSearchFilter","searchString","actions","Header","connect","props","useState","searchValue","setSearchValue","handleSettingsChange","evt","preventDefault","name","target","value","handleRequestContacts","listSize","dataset","listsize","className","onClick","data-listsize","min","max","id","pattern","onChange","htmlFor","e","ContactDetails","contact","firstName","lastName","src","noUserPhoto","email","phone","address","streetAddress","city","zip","description","Preloader","size","color","Paginator","totalPages","Math","ceil","itemsTotal","itemsPerPage","pagesList","Array","pagesPerPortion","fill","startPage","currentPage","setCurrentPage","floor","portionToShow","setPortionToShow","useEffect","goToPage","page","step","parsePageNumber","pn","parseInt","isNaN","getPage","li","closest","classList","contains","number","undefined","data-number","href","map","p","i","n","setSortBy","propertyName","toggleSortForward","setShowFrom","ContactsList","itemToShow","showContactDetails","setShowContactDetails","handleTableClick","tr","tableRowClasses","from","includes","newSortBy","sortby","index","sortDirection","Fragment","el","data-sortby","c","data-index","layout","contactTemplate","insertBegin","newContact","AddUserContact","showAddUserContact","setShowAddUserContact","addUserFormData","setAddUserFormData","hasEmptyField","setHasEmptyField","isSomeFieldEmpty","fieldsList","every","field","handleInputChange","onSubmit","disabled","Main","App","initialState","reducers","combineReducers","action","trim","replace","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5a588af1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noUserPhoto.ad3cf281.webp\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createSelector} from \"reselect\";\r\n\r\n/// SUBROUTINES ///\r\n\r\nconst applySearchFilter = (array, search) => {\r\n  // new regExp from user input\r\n  const regExp = new RegExp(search, 'igm')\r\n\r\n  const checkStringInObj = (obj) => {\r\n    let found = false\r\n\r\n    for (let key in obj) {\r\n      if (obj.hasOwnProperty(key)) {\r\n        // each Object can contain another Object, so we need to go deeper\r\n        if (typeof obj[key] === \"object\") {\r\n          found = checkStringInObj(obj[key])\r\n        } else {\r\n          found = regExp.test(obj[key])\r\n        }\r\n\r\n        // if the substring is found, it doesn't matter what is in the other properties\r\n        if (found) {\r\n          return true\r\n        }\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  return array.filter(checkStringInObj)\r\n}\r\n\r\nconst sortList = (array, sortProperty, forward) => {\r\n  let s\r\n  if (forward) {\r\n    s = (a,b) => (a[sortProperty] > b[sortProperty])\r\n  }\r\n  else {\r\n    s = (a,b) => (a[sortProperty] < b[sortProperty])\r\n  }\r\n\r\n  return array.sort(s)\r\n}\r\n\r\n\r\n/// SELECTORS ///\r\n\r\nconst getAllContacts = (state) => state.contactsList.list\r\nconst getContactsListLength = (state) => getFilteredContacts(state).length\r\nconst getContactsPerPage = (state) => state.contactsList.contactsPerPage\r\nconst getSearchFilter = (state) => state.contactsList.searchFilter\r\nconst getShowFrom = (state) => state.contactsList.showFrom\r\nconst getSortBy = (state) => state.contactsList.sortBy\r\nconst getSortForward = (state) => state.contactsList.sortForward\r\n\r\n\r\nconst getFilteredContacts = createSelector([getAllContacts, getSearchFilter], (contacts, searchFilter) => {\r\n  if (searchFilter) {\r\n    contacts = applySearchFilter(contacts, searchFilter)\r\n  }\r\n\r\n  if (contacts.length === 0) {\r\n    contacts = ['Данные отсутствуют.']\r\n  }\r\n\r\n  return contacts\r\n})\r\n\r\n\r\nconst getSortedContacts = createSelector([getFilteredContacts, getSortBy, getSortForward], (contacts, sortBy, sortForward) => {\r\n    return sortList(contacts, sortBy, sortForward).slice()\r\n})\r\n\r\n\r\nconst getSlicedList = createSelector([getSortedContacts, getShowFrom, getContactsPerPage], (list, showFrom, contactsPerPage) => {\r\n  if (showFrom > list.length - 1){\r\n    showFrom = list.length - 1\r\n  }\r\n\r\n  if (contactsPerPage < 5) {\r\n    contactsPerPage = 5\r\n  }\r\n  if (contactsPerPage > 50) {\r\n    contactsPerPage = 50\r\n  }\r\n\r\n  return list.slice(showFrom, showFrom + contactsPerPage)\r\n})\r\n\r\n\r\nconst getContactsList = (state) => {\r\n  const {isFetching, fetchingSuccess} = state.contactsList\r\n\r\n  if (isFetching) {\r\n    return []\r\n  }\r\n\r\n  if (!fetchingSuccess) {\r\n    return ['Что-то пошло не так. Невозможно получить данные. Проверьте соединение с интернетом или попробуйте позже.']\r\n  }\r\n\r\n  return getSlicedList(state)\r\n}\r\n\r\nexport {\r\n  getContactsList\r\n  , getContactsPerPage\r\n  , getSearchFilter\r\n  , getSortBy\r\n  , getSortForward\r\n  , getShowFrom\r\n  , getContactsListLength\r\n}","export const CONTACTS_PER_PAGE = 'contactsList/CONTACTS_PER_PAGE'\r\nexport const FETCHING_LIST = 'contactsList/FETCHING_LIST'\r\nexport const FETCHING_SUCCESS = 'contactsList/FETCHING_SUCCESS'\r\nexport const FETCHING_FAILED = 'contactsList/FETCHING_FAILED'\r\nexport const INSERT_BEGIN = 'contactsList/INSERT_BEGIN'\r\nexport const REQUEST_LIST = 'contactsList/REQUEST_LIST'\r\nexport const SEARCH_FILTER = 'contactsList/SEARCH_FILTER'\r\nexport const SHOW_FROM = 'contactsList/SHOW_FROM'\r\nexport const SORT_BY = 'contactsList/SORT_BY'\r\nexport const SORT_FORWARD = 'contactsList/SORT_FORWARD'","// action creators\r\n\r\nimport * as types from \"./types\";\r\n\r\nexport const contactsPerPage = (payload) => ({\r\n  type: types.CONTACTS_PER_PAGE,\r\n  payload\r\n})\r\n\r\nexport const fetchingList = () => ({type: types.FETCHING_LIST})\r\n\r\nexport const fetchingSuccess = () => ({type: types.FETCHING_SUCCESS})\r\n\r\nexport const fetchingFailed = () => ({type: types.FETCHING_FAILED})\r\n\r\nexport const insertBegin = (payload) => ({\r\n  type     : types.INSERT_BEGIN\r\n  , payload\r\n})\r\n\r\nexport const requestList = (payload) => ({\r\n  type     : types.REQUEST_LIST\r\n  , payload\r\n})\r\n\r\nexport const searchFilter = (payload) => ({\r\n  type     : types.SEARCH_FILTER\r\n  , payload\r\n})\r\n\r\nexport const showFrom = (payload) => ({\r\n  type: types.SHOW_FROM\r\n  , payload\r\n})\r\n\r\nexport const sortBy = (payload = 'id') => ({\r\n  type: types.SORT_BY\r\n  , payload\r\n})\r\n\r\nexport const toggleSortForward = () => ({type: types.SORT_FORWARD})\r\n","import React, {useState} from 'react'\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {getContactsPerPage, getSearchFilter} from '../../../FLUX/contactsList/selectors'\r\nimport {requestList, setContactsPerPage, setSearchFilter} from \"../../../FLUX/contactsList/operations\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contactsPerPage: getContactsPerPage(state)\r\n  , searchFilter: getSearchFilter(state)\r\n})\r\n\r\nconst mapDispatchToProps = ({\r\n  setContactsPerPage\r\n  , requestList\r\n  , setSearchFilter\r\n})\r\n\r\nconst HeaderLogic = (props) => {\r\n  const [searchValue, setSearchValue] = useState(props.searchFilter)\r\n\r\n  const handleSettingsChange = (evt) => {\r\n    evt.preventDefault()\r\n\r\n    let name = evt.target.name\r\n    // let value = evt.target.type === 'checkbox' ? evt.target.checked : evt.target.value\r\n    let value = evt.target.type === 'number' ? +evt.target.value : evt.target.value\r\n\r\n    // console.log('Header.HandleSettingsChange:', 'name = ', name, 'value = ', value)\r\n\r\n    props[name](value)\r\n  }\r\n\r\n  const handleRequestContacts = (evt) => {\r\n    const listSize = +evt.target.dataset.listsize\r\n\r\n    props.requestList(listSize)\r\n  }\r\n\r\n  // console.log('Header.props', props)\r\n\r\n  return (\r\n    <header>\r\n      <h1>Список контактов</h1>\r\n\r\n      {/* Here will be a separate component Settings when the block contains more fields */}\r\n      <div className=\"settings row\">\r\n\r\n        <div className=\"settings-requestList col s6 row\">\r\n\r\n            <button\r\n              className=\"btn waves-effect waves-light col s11 row\"\r\n              onClick={handleRequestContacts}\r\n              data-listsize='30'\r\n            >\r\n              Загрузить мало контактов\r\n            </button>\r\n\r\n            <button\r\n              className=\"btn waves-effect waves-light col  s11 row\"\r\n              onClick={handleRequestContacts}\r\n              data-listsize='1000'\r\n            >\r\n              Загрузить много контактов\r\n            </button>\r\n\r\n        </div>\r\n\r\n        <form className=\"settings-Form col s6 \">\r\n\r\n          <div className=\"input-field row\">\r\n            <input className='col s2'\r\n                   type=\"number\"\r\n                   min='5'\r\n                   max='50'\r\n                   id=\"setContactsPerPage\"\r\n                   name='setContactsPerPage'\r\n                   pattern='\\d*'\r\n                   onChange={handleSettingsChange}\r\n                   value={props.contactsPerPage}\r\n            />\r\n            <label htmlFor=\"setContactsPerPage\" className='active'>Количество контактов на странице</label>\r\n          </div>\r\n\r\n        </form>\r\n      </div>\r\n\r\n      <form className=\"searchForm row valign-wrapper\">\r\n\r\n        <div className=\"input-field col s12 m7\">\r\n          <i className=\"material-icons prefix\">search</i>\r\n          <input className=''\r\n                 type=\"text\"\r\n                 id=\"searchFilter\"\r\n                 name='searchFilter'\r\n                 onChange={(e) => {setSearchValue(e.target.value)}}\r\n                 value={searchValue}\r\n          />\r\n          <label htmlFor=\"searchFilter\" className='active'>Поиск по списку</label>\r\n        </div>\r\n\r\n        <div className=\"row col s12 m5\">\r\n\r\n          <button\r\n            className=\"btn col s6 m5\"\r\n            name='setSearchFilter'\r\n            onClick={handleSettingsChange}\r\n            value={searchValue}\r\n          >\r\n            <i className=\"material-icons left\">search</i>\r\n            Найти\r\n          </button>\r\n\r\n          <button\r\n            className=\"btn  col s6 m5 offset-m1\"\r\n            name='setSearchFilter'\r\n            onClick={(e) => {\r\n              handleSettingsChange(e);\r\n              setSearchValue('')\r\n            }}\r\n            value=''\r\n          >\r\n            <i className=\"material-icons left red-text\">clear</i>\r\n            Очистить поиск\r\n          </button>\r\n\r\n        </div>\r\n\r\n      </form>\r\n\r\n    </header>\r\n  )\r\n}\r\n\r\nexport const Header = connect(mapStateToProps, mapDispatchToProps)(HeaderLogic)","// Place here simple actions call or Thunks and thunk creators if need.\r\n\r\nimport * as actions from './actions'\r\nimport * as axios from 'axios'\r\n\r\nexport const setContactsPerPage = (num) => (dispatch) => {\r\n  dispatch(actions.contactsPerPage(num))\r\n}\r\n\r\nexport const insertBegin = (newContact) => (dispatch) => {\r\n  dispatch (actions.insertBegin(newContact))\r\n}\r\n\r\nexport const requestList = (rows) => (dispatch) => {\r\n\r\n  dispatch(actions.fetchingList())\r\n\r\n  axios.get(`http://www.filltext.com/?rows=${rows}&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`, {\r\n    headers: { 'Access-Control-Allow-Origin': '*' }\r\n  })\r\n    .then(response => {\r\n      if (response.status === 200) {\r\n        dispatch(actions.requestList(response.data))\r\n        dispatch(actions.fetchingSuccess())\r\n      }\r\n      else {\r\n        dispatch(actions.fetchingFailed())\r\n      }\r\n    })\r\n}\r\n\r\nexport const setSearchFilter = (searchString) => (dispatch) => {\r\n  dispatch(actions.searchFilter(searchString))\r\n  dispatch(actions.showFrom(0))\r\n}\r\n\r\nexport const setShowFrom = (num) => (dispatch) => {\r\n  dispatch(actions.showFrom(num))\r\n}\r\n\r\nexport const setSortBy = (propertyName) => (dispatch) => {\r\n  dispatch(actions.sortBy(propertyName))\r\n}\r\n\r\nexport const toggleSortForward = () => (dispatch) => {\r\n  dispatch(actions.toggleSortForward())\r\n}\r\n","import React from 'react'\r\nimport noUserPhoto from '../../../assets/images/noUserPhoto.webp'\r\n\r\nexport const ContactDetails = ({contact = null}) => {\r\n  const getUserPhoto = () => {}\r\n\r\n\r\n  return contact && (\r\n    <div className='section row'>\r\n\r\n      <div className=\"col s12 m10 l8 offset-m1 offset-l2\">\r\n        <h4 className=\"header\">{contact.firstName} {contact.lastName}</h4>\r\n        <div className=\"card horizontal \">\r\n          <div className=\"card-image col s4\">\r\n            <img className=\"responsive-img\" src={getUserPhoto() || noUserPhoto} />\r\n          </div>\r\n          <div className=\"card-stacked\">\r\n            <div className=\"card-content\">\r\n              <span className=\"card-title\">Summary</span>\r\n\r\n              <p><strong>id: </strong> {contact.id}</p>\r\n              <p><strong>First name: </strong> {contact.firstName}</p>\r\n              <p><strong>Last name: </strong> {contact.lastName}</p>\r\n              <p><strong>email: </strong> {contact.email}</p>\r\n              <p><strong>phone: </strong> {contact.phone}</p>\r\n\r\n              <span className=\"card-title\">Address</span>\r\n\r\n              <p><strong>Street: </strong> {contact.address.streetAddress}</p>\r\n              <p><strong>City:</strong> {contact.address.city}</p>\r\n              <p><strong>State</strong> {contact.address.state}</p>\r\n              <p><strong>Zip:</strong> {contact.address.zip}</p>\r\n\r\n            </div>\r\n\r\n            <div className=\"card-action\">\r\n              <span className=\"card-title\">Description</span>\r\n              <p>{contact.description}</p>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n      </div>\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React from 'react'\r\n\r\n/**\r\n *\r\n * @param {String} [size] - 'big' or 'small' size, if empty preloader will be default medium size\r\n * @param {String} [color] - one of list: blue, red, yellow, green\r\n * @return {JSX.Element}\r\n * @constructor\r\n */\r\nexport const Preloader = ({size, color='blue'}) => {\r\n  return (\r\n    <div className='section center-align'>\r\n      <div className={`preloader-wrapper ${size} active `}>\r\n        <div className={`spinner-layer spinner-${color}-only`}>\r\n          <div className=\"circle-clipper left\">\r\n            <div className=\"circle\"></div>\r\n          </div>\r\n          <div className=\"gap-patch\">\r\n            <div className=\"circle\"></div>\r\n          </div>\r\n          <div className=\"circle-clipper right\">\r\n            <div className=\"circle\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, {useEffect, useState} from \"react\";\r\n\r\n/**\r\n * @param {object} props\r\n * @param {number} props.itemsTotal - total amount of items in all pages\r\n * @param {number} props.itemsPerPage\r\n * @param {number} props.pagesPerPortion - amount of pageLinks available in Paginator at once\r\n * @param {number} props.startPage\r\n * @param {function} props.getPage - function to be called when user request other page\r\n * @returns {JSX.Element} - layout\r\n * @constructor\r\n */\r\nexport const Paginator = (props) => {\r\n\r\n  ///     Local Variables     ///\r\n  let totalPages =  Math.ceil( props.itemsTotal / props.itemsPerPage )\r\n\r\n  const pagesList = new Array(props.pagesPerPortion).fill(1) //if create empty elements JS do not map them\r\n\r\n  const [currentPage, setCurrentPage] = useState(props.startPage || 0)\r\n  const [ portionToShow, setPortionToShow  ] = useState(Math.floor( currentPage / props.pagesPerPortion ))\r\n\r\n  //rerender when props.currentPage is changed\r\n  useEffect(() => {\r\n    setCurrentPage(0)\r\n    setPortionToShow(0)\r\n    goToPage(0)\r\n  }, [props.itemsTotal, props.itemsPerPage])\r\n\r\n\r\n  ///     Local Functions     ///\r\n  const goToPage = (page = 0, step = 1) => {\r\n\r\n    const parsePageNumber = (pn) => {\r\n      pn = parseInt(pn)\r\n      if (isNaN(pn)) {\r\n        pn = currentPage\r\n      }\r\n      return pn\r\n    }\r\n\r\n    // calculate index next page start\r\n    switch (page) {\r\n      case 'next':\r\n        page = currentPage + step\r\n        break\r\n      case 'prev':\r\n        page = currentPage - step\r\n        break\r\n      case 'last':\r\n        page = totalPages - step\r\n        break\r\n      case 'first':\r\n        page = 0\r\n        break\r\n      default: // warn: !!!  page value is changed !!!\r\n        // parse number or rollback if page either not correct string either number\r\n        page = parsePageNumber(page)\r\n\r\n    }\r\n\r\n    // validate next page number\r\n      if (page > totalPages - 1) {\r\n        page = totalPages -1\r\n      }\r\n      else if (page < 0) {\r\n        page = 0\r\n      }\r\n\r\n    if (page !== currentPage){\r\n      // request page only when it really need\r\n      props.getPage(page)\r\n      setCurrentPage(page)\r\n      setPortionToShow(Math.floor(page / props.pagesPerPortion))\r\n    }\r\n  }\r\n\r\n  const pageNumberClickHandler = (e) => {\r\n    let li = e.target.closest('li')\r\n    if (li && !li.classList.contains('disabled')) {\r\n      goToPage( li.dataset.number )\r\n    }\r\n  }\r\n\r\n\r\n  ///     RETURN Layout to render     ///\r\n  return (\r\n    <div className='row' >\r\n      <ul\r\n        className=\"pagination\"\r\n        onClick={pageNumberClickHandler}\r\n      >\r\n\r\n        <li\r\n          className={(currentPage < 1) ? 'disabled' : undefined}\r\n          data-number='first'\r\n        >\r\n          <a href='#!'> <i className=\"material-icons \">skip_previous</i> </a>\r\n        </li>\r\n\r\n        <li\r\n          className={(currentPage < 1) ? 'disabled' : undefined}\r\n          data-number='prev'\r\n        >\r\n          <a href='#!' > <i className=\"material-icons\">chevron_left</i> </a>\r\n        </li>\r\n\r\n        {\r\n          pagesList.map((p, i) => {\r\n            let n = i + portionToShow * props.pagesPerPortion\r\n\r\n            if (n > totalPages - 1) {\r\n              return null\r\n            }\r\n\r\n            return (\r\n              <li\r\n                key={i}\r\n                data-number={n}\r\n                className={(currentPage === n) ? 'active' : undefined}\r\n              >\r\n                <a href=\"#!\">{n + 1}</a>\r\n              </li>\r\n            )\r\n          })\r\n        }\r\n\r\n        <li className='disabled'><a href=\"#!\"> / {totalPages} </a></li>\r\n\r\n        <li\r\n          className={(currentPage >= totalPages - 1) ? 'disabled' : undefined}\r\n          data-number='next'\r\n        >\r\n          <a href=\"#!\"><i className=\"material-icons \">chevron_right</i></a>\r\n        </li>\r\n\r\n        <li\r\n          className={(currentPage >= totalPages - 1) ? 'disabled' : undefined}\r\n          data-number='last'\r\n        >\r\n          <a href=\"#!\"><i className=\"material-icons \">skip_next</i></a>\r\n        </li>\r\n\r\n        {/*<input type=\"number\" min={1} max={totalPages} inputMode='numeric' onChange={inputPageNumberHandler} />*/}\r\n        {/*<button onClick={()=>{goToPage(inputPageNumber)}} >перейти</button>*/}\r\n\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n","import React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {\r\n  getContactsList, getContactsListLength,\r\n  getContactsPerPage,\r\n  getShowFrom,\r\n  getSortBy,\r\n  getSortForward\r\n} from \"../../../FLUX/contactsList/selectors\";\r\nimport {setShowFrom, setSortBy, toggleSortForward} from \"../../../FLUX/contactsList/operations\";\r\nimport {ContactDetails} from \"./ContactDetails\";\r\nimport {Preloader} from \"../common/Preloader\";\r\nimport {Paginator} from \"../common/Pagination/Paginator\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contactsList     : getContactsList(state)\r\n  , sortBy         : getSortBy(state)\r\n  , sortForward    : getSortForward(state)\r\n  , itemToShow     : getShowFrom(state)\r\n  , contactsPerPage: getContactsPerPage(state)\r\n  , itemsTotal     : getContactsListLength(state)\r\n  // , state\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  setSortBy\r\n  , toggleSortForward\r\n  , setShowFrom\r\n}\r\n\r\nconst ContactsListLogic = (props) => {\r\n  /// VARIABLES ///\r\n  const [showContactDetails, setShowContactDetails] = useState(null)\r\n  useEffect(() => {\r\n    setShowContactDetails(null)\r\n  }, [props])\r\n\r\n\r\n  /// HANDLERS ///\r\n\r\n  const handleTableClick = (evt) => {\r\n    setShowContactDetails(null)\r\n\r\n    let tr = evt.target.closest('tr')\r\n    let tableRowClasses = tr ? Array.from(tr.classList) : []\r\n\r\n    // console.log('ContactsList.handleTableClick:', 'closest', tableRowClasses)\r\n    // console.log('ContactsList.handleTableClick > appState.contactsList', props.state.contactsList )\r\n\r\n    // handle Table Header click\r\n    if (tableRowClasses.includes('tableHeadersRow')) {\r\n      let newSortBy = evt.target.closest('th').dataset.sortby\r\n\r\n      if (newSortBy && newSortBy !== props.sortBy) {\r\n        props.setSortBy(newSortBy)\r\n      }\r\n      else  {\r\n        props.toggleSortForward()\r\n      }\r\n    }\r\n\r\n    // handle Table simple Row click\r\n    if (tableRowClasses.includes('tableRow')) {\r\n      setShowContactDetails(parseInt(evt.target.closest('tr').dataset.index))\r\n    }\r\n  }\r\n\r\n\r\n  /// CREATE LAYOUT ///\r\n\r\n  const layout = () => {\r\n    if (props.contactsList.length === 0) {\r\n      // show preloader while waiting data\r\n      return <Preloader size={'big'} color={'green'}/>\r\n    }\r\n    else if (props.contactsList.length === 1 && typeof props.contactsList[0] !== \"object\") {\r\n      // the only element is not an Object? So here is a service message\r\n      return props.contactsList[0]\r\n    }\r\n    else {\r\n      // render data\r\n\r\n      // console.log('ContactsList.props.contactsList = ', props.contactsList)\r\n      const sortDirection = (\r\n        <React.Fragment>\r\n          <i className=\"material-icons right\">sort_by_alpha</i>\r\n          <i className={`material-icons ${props.sortForward && 'inverted'}`}>sort</i>\r\n        </React.Fragment>\r\n      )\r\n\r\n      return (\r\n        <React.Fragment>\r\n\r\n          <Paginator\r\n            startPage={0}\r\n            pagesPerPortion={5}\r\n            getPage={(page) => (props.setShowFrom(page * props.contactsPerPage))}\r\n            itemsPerPage={props.contactsPerPage}\r\n            itemsTotal={props.itemsTotal}\r\n          />\r\n\r\n          { /* contacts list table */}\r\n          <table\r\n            className='highlight striped responsive-table'\r\n            onClick={handleTableClick}\r\n          >\r\n\r\n            <thead>\r\n            <tr className='tableHeadersRow'>\r\n              {\r\n                ['id', 'firstName', 'lastName', 'email', 'phone']\r\n                  .map((el, i) => {\r\n                    return (<th key={i} data-sortby={el}>\r\n                      <div className=\"valign-wrapper cursor-pointer\">\r\n                        {el} {el === props.sortBy && sortDirection}\r\n                      </div>\r\n                    </th>)\r\n                  })\r\n              }\r\n            </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n            {props.contactsList.map((c, i) => (\r\n              <tr className='tableRow' key={i} data-index={i}>\r\n                <td>{c.id}</td>\r\n                <td>{c.firstName}</td>\r\n                <td>{c.lastName}</td>\r\n                <td>{c.email}</td>\r\n                <td>{c.phone}</td>\r\n              </tr>\r\n            ))}\r\n            </tbody>\r\n\r\n          </table>\r\n\r\n          {showContactDetails !== null && <ContactDetails contact={props.contactsList[showContactDetails]}   /> }\r\n        </React.Fragment>\r\n      )\r\n    }\r\n  }\r\n\r\n  /// PAYLOAD ///\r\n\r\n  return layout()\r\n}\r\n\r\nexport const ContactsList = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ContactsListLogic)","import React, {useEffect, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {insertBegin} from \"../../../FLUX/contactsList/operations\";\r\n\r\nconst contactTemplate = {\r\n  id: '',\r\n  firstName: '',\r\n  lastName: '',\r\n  email: '',\r\n  phone: '',\r\n  address: {\r\n    streetAddress: '',\r\n    city: '',\r\n    state: '',\r\n    zip: ''\r\n  },\r\n  description: '',\r\n}\r\n\r\nconst mapStateToProps = (state) => ({})\r\n\r\nconst mapDispatchToProps = {\r\n  insertBegin\r\n}\r\n\r\nconst AddUserContactLogic = (props) => {\r\n  /// VARIABLES ///\r\n  const [showAddUserContact, setShowAddUserContact] = useState(false)\r\n  const [addUserFormData, setAddUserFormData] = useState(contactTemplate)\r\n  const [hasEmptyField, setHasEmptyField] = useState(true)\r\n  useEffect(() => {\r\n    setHasEmptyField(isSomeFieldEmpty())\r\n  }, [addUserFormData])\r\n\r\n\r\n  /// SUBROUTINES ///\r\n  const isSomeFieldEmpty = (fieldsList) => {\r\n    fieldsList = fieldsList || ['id', 'firstName', 'lastName', 'email', 'phone']\r\n\r\n    return !fieldsList.every((field) => (addUserFormData[field] !== '' ))\r\n  }\r\n\r\n\r\n  /// HANDLERS ///\r\n  const handleInputChange = (evt) => {\r\n    const name = evt.target.name\r\n    const value = evt.target.value\r\n\r\n    setAddUserFormData({...addUserFormData, [name]: value})\r\n  }\r\n\r\n  const handleAddUserSubmit = (evt) => {\r\n    evt.preventDefault()\r\n\r\n    props.insertBegin(addUserFormData)\r\n\r\n    setAddUserFormData(contactTemplate)\r\n  }\r\n\r\n\r\n  /// PAYLOAD ///\r\n  return (\r\n\r\n    <React.Fragment>\r\n\r\n      <div className=\"addUserContact\">\r\n        <button\r\n          className=\" btn teal absolute btn-collapse\"\r\n          onClick={() => setShowAddUserContact(!showAddUserContact)}\r\n        >\r\n          <i className=\"large material-icons\">add</i>\r\n        </button>\r\n      </div>\r\n\r\n      {showAddUserContact && (\r\n        <form\r\n          className=\"addUser-Form \"\r\n          onSubmit={handleAddUserSubmit}\r\n        >\r\n          <div className=\"row\">\r\n\r\n            <div className=\"input-field col s12 \">\r\n              <input\r\n                id=\"contactId\"\r\n                name='id'\r\n                pattern='\\d+'\r\n                onChange={handleInputChange}\r\n                value={addUserFormData.id}\r\n              />\r\n              <label htmlFor=\"contactId\" className='active'>id</label>\r\n            </div>\r\n\r\n            <div className=\"input-field col s12 m6\">\r\n              <input\r\n                type=\"text\"\r\n                id=\"contactFirstName\"\r\n                name='firstName'\r\n                onChange={handleInputChange}\r\n                value={addUserFormData.firstName}\r\n              />\r\n              <label htmlFor=\"contactFirstName\" className='active'>First name</label>\r\n            </div>\r\n\r\n            <div className=\"input-field col s12 m6\">\r\n              <input\r\n                type=\"text\"\r\n                id=\"contactLastName\"\r\n                name='lastName'\r\n                onChange={handleInputChange}\r\n                value={addUserFormData.lastName}\r\n              />\r\n              <label htmlFor=\"contactLastName\" className='active'>Last name</label>\r\n            </div>\r\n\r\n            <div className=\"input-field col s12 m6 \">\r\n              <input\r\n                type=\"email\"\r\n                id=\"contactEmail\"\r\n                name='email'\r\n                onChange={handleInputChange}\r\n                value={addUserFormData.email}\r\n              />\r\n              <label htmlFor=\"contactEmail\" className='active'>email</label>\r\n            </div>\r\n\r\n            <div className=\"input-field col s12 m6\">\r\n              <input\r\n                type=\"tel\"\r\n                id=\"contactPhone\"\r\n                name='phone'\r\n                onChange={handleInputChange}\r\n                value={addUserFormData.phone}\r\n              />\r\n              <label htmlFor=\"contactPhone\" className='active'>phone</label>\r\n            </div>\r\n\r\n            <button\r\n              className=\"btn col s4 offset-s8\"\r\n              disabled={hasEmptyField}\r\n            >\r\n              Добавить\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"divider\"></div>\r\n        </form>\r\n      )}\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport const AddUserContact = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AddUserContactLogic)","import React from 'react'\r\nimport {ContactsList} from \"../ContactsList/ContactsList\";\r\nimport {AddUserContact} from \"../ContactsList/AddUserContact\";\r\n\r\nexport const Main = (props) => {\r\n  return (\r\n    <main className='section relative'>\r\n      <AddUserContact />\r\n      <ContactsList />\r\n    </main>\r\n  )\r\n}\r\n","import React from 'react';\nimport {Header} from \"./VIEW/Components/Header/Header\";\nimport {Main} from \"./VIEW/Components/Main/Main\";\n\nfunction App() {\n  return (\n    <React.Fragment >\n      <Header />\n      <div className=\"divider\"></div>\n      <Main />\n      <footer className='footer'></footer>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import {\r\n  CONTACTS_PER_PAGE,\r\n  FETCHING_FAILED,\r\n  FETCHING_LIST,\r\n  FETCHING_SUCCESS,\r\n  INSERT_BEGIN,\r\n  REQUEST_LIST,\r\n  SEARCH_FILTER,\r\n  SHOW_FROM,\r\n  SORT_BY,\r\n  SORT_FORWARD\r\n} from \"./types\";\r\n\r\nconst initialState = {\r\n    contactsPerPage: 5\r\n  , showFrom       : 0\r\n  , fetchingSuccess: true\r\n  , isFetching     : false\r\n  , list           : []\r\n  , searchFilter   : ''\r\n  , sortBy         : ''\r\n  , sortForward    : true\r\n}\r\n\r\nexport const contactsList = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CONTACTS_PER_PAGE:\r\n      return {...state,  contactsPerPage: action.payload}\r\n\r\n    case FETCHING_FAILED:\r\n      return {...state,  fetchingSuccess: false, isFetching: false}\r\n\r\n    case FETCHING_LIST:\r\n      return {...state,  fetchingSuccess: false, isFetching: true}\r\n\r\n    case FETCHING_SUCCESS:\r\n      return {...state, fetchingSuccess: true, isFetching: false}\r\n\r\n    case INSERT_BEGIN:\r\n      return {...state, list: [action.payload, ...state.list]}\r\n\r\n    case REQUEST_LIST:\r\n      return {...state, list: action.payload}\r\n\r\n    case SEARCH_FILTER:\r\n      // escaping regExp tokens\r\n      action.payload = action.payload.trim().replace(/[.*+?^${}()|[\\]\\\\]/gm, '\\\\$&')\r\n      return {...state, searchFilter: action.payload}\r\n\r\n    case SHOW_FROM:\r\n      return {...state, showFrom: action.payload}\r\n\r\n    case SORT_BY:\r\n      return {...state, sortBy: action.payload, sortForward: true}\r\n\r\n    case SORT_FORWARD:\r\n      return {...state, sortForward: !state.sortForward}\r\n\r\n    default:\r\n      return state\r\n  }\r\n}","\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nimport {contactsList} from \"./contactsList/reducers\";\r\n\r\nconst reducers = combineReducers({\r\n  contactsList\r\n})\r\n\r\nlet store = createStore( reducers, applyMiddleware( thunkMiddleware ) )\r\n\r\n// window.contactsAppState = store.getState()\r\n\r\nexport default store\r\n","import * as serviceWorker from './serviceWorker';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.sass';\nimport App from './App';\n\nimport store from \"./FLUX/storage\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}